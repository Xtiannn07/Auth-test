rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ==================== USERNAMES COLLECTION ====================
    match /usernames/{username} {
      allow get: if true;
      allow create, update, delete: if request.auth != null && 
                                   request.auth.uid == request.resource.data.uid;
    }

    // ==================== USERS COLLECTION ====================
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.auth.uid == userId;
      // Allow users to update their own profile
      allow update: if request.auth != null && 
                    request.auth.uid == userId &&
                    onlyUpdatesAllowedFields(request.resource.data, resource.data);
      
      // User's posts subcollection
      match /posts/{postId} {
        allow read: if true;
        allow create: if request.auth != null && 
                      request.auth.uid == userId &&
                      validPostDocument(request.resource.data);
      }
      
      // User's reposts subcollection
      match /reposts/{repostId} {
        allow read: if true;
        allow create: if request.auth != null && request.auth.uid == userId;
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // User's saved posts subcollection
      match /savedPosts/{postId} {
        allow read: if true;
        allow create, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // ==================== ACTIVITIES COLLECTION ====================
    match /activities/{activityId} {
      // Anyone can read activities where they are the recipient
      allow read: if request.auth != null && 
                  resource.data.recipientId == request.auth.uid;
      
      // Only authenticated users can create activities
      allow create: if request.auth != null && 
                   request.resource.data.senderId == request.auth.uid &&
                   validActivityDocument(request.resource.data);
                   
      // Users can only delete activities they created
      allow delete: if request.auth != null && 
                    resource.data.senderId == request.auth.uid;
    }

    // ==================== FOLLOWING COLLECTION ====================
    match /following/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == userId;
      
      // Users subcollection to store who user is following
      match /users/{followedUserId} {
        allow read: if true;
        // Only allow user to update their own following list
        allow create, update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // ==================== FOLLOWERS COLLECTION ====================
    match /followers/{userId} {
      allow read: if true;
      
      // Users subcollection to store who follows the user
      match /users/{followerId} {
        allow read: if true;
        // Allow followers to add/remove themselves
        allow create, update: if request.auth != null && request.auth.uid == followerId;
        // Allow the user who is being followed to remove followers
        allow delete: if request.auth != null && (request.auth.uid == userId || request.auth.uid == followerId);
      }
    }

    // ==================== POSTS COLLECTION ====================
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if request.auth != null && 
                    validPostDocument(request.resource.data) &&
                    request.resource.data.author.id == request.auth.uid;
      allow update: if isPostAuthor() && 
                   withinEditWindow() && 
                   onlyUpdatesAllowedPostFields(request.resource.data, resource.data);
      // Allow counter updates for likes, comments, reposts, and saves
      allow update: if request.auth != null &&
                   onlyUpdatesEngagementCounts(request.resource.data, resource.data);
      allow delete: if isPostAuthor();
      
      // Likes subcollection
      match /likes/{userId} {
        allow read: if true;
        allow create: if request.auth != null && request.auth.uid == userId && validLikeDocument(request.resource.data);
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null && 
                      request.resource.data.author.uid == request.auth.uid && 
                      validCommentDocument(request.resource.data);
        allow update: if request.auth != null && 
                      resource.data.author.uid == request.auth.uid &&
                      withinCommentEditWindow() &&
                      onlyUpdatesCommentText(request.resource.data, resource.data);
        allow delete: if request.auth != null && 
                      (resource.data.author.uid == request.auth.uid || isPostAuthor());
      }
    }
    
    // ==================== REPOSTS COLLECTION ====================
    match /reposts/{repostId} {
      allow read: if true;
      allow create: if request.auth != null && 
                    request.resource.data.repostedBy == request.auth.uid &&
                    validRepostDocument(request.resource.data);
      allow delete: if request.auth != null && resource.data.repostedBy == request.auth.uid;
    }

    // ==================== HELPER FUNCTIONS ====================
    function onlyUpdatesAllowedFields(newData, oldData) {
      return newData.diff(oldData).affectedKeys().hasOnly([
        "displayName",
        "bio",
        "website",
        "avatarUrl",
        "username",
        "photoURL",
        "email"
      ]);
    }

    function isPostAuthor() {
      return resource != null && 
             resource.data != null &&
             resource.data.author != null &&
             resource.data.author.id != null &&
             request != null &&
             request.auth != null && 
             request.auth.uid == resource.data.author.id;
    }

    function withinEditWindow() {
      return request.time < resource.data.createdAt + duration.value(24, 'h');
    }

    function withinCommentEditWindow() {
      return request.time < resource.data.createdAt + duration.value(1, 'h');
    }

    function validPostDocument(data) {
      return data.keys().hasAll([
        "title",
        "content",
        "author",
        "createdAt"
      ]) && data.title is string &&
           data.content is string &&
           data.author is map &&
           data.author.id is string &&
           data.author.name is string &&
           data.createdAt is timestamp;
    }

    function validActivityDocument(data) {
      return data.keys().hasAll([
        "type",
        "senderId",
        "senderName",
        "recipientId"
      ]) && 
      data.type is string &&
      data.senderId is string &&
      data.senderName is string &&
      data.recipientId is string;
    }

    function onlyUpdatesAllowedPostFields(newData, oldData) {
      return newData.diff(oldData).affectedKeys().hasOnly(["title", "content"]);
    }

    function onlyUpdatesEngagementCounts(newData, oldData) {
      return newData.diff(oldData).affectedKeys().hasAny([
        "likeCount", 
        "commentCount", 
        "repostCount", 
        "saveCount"
      ]);
    }
    
    function validLikeDocument(data) {
      return data.keys().hasAll([
        "userId",
        "displayName",
        "timestamp"
      ]) && 
      data.userId is string &&
      data.displayName is string &&
      data.timestamp is timestamp;
    }
    
    function validCommentDocument(data) {
      return data.keys().hasAll([
        "postId",
        "author",
        "text",
        "createdAt"
      ]) && 
      data.postId is string &&
      data.author is map &&
      data.author.uid is string &&
      data.author.displayName is string &&
      data.text is string &&
      data.createdAt is timestamp;
    }
    
    function onlyUpdatesCommentText(newData, oldData) {
      return newData.diff(oldData).affectedKeys().hasOnly(["text"]);
    }
    
    function validRepostDocument(data) {
      return data.keys().hasAll([
        "originalPostId",
        "repostedBy",
        "repostedAt",
        "originalAuthor"
      ]) &&
      data.originalPostId is string &&
      data.repostedBy is string &&
      data.repostedAt is timestamp &&
      data.originalAuthor is map;
    }

    // ==================== DEFAULT DENY ====================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}