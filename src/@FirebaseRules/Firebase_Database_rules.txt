rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ==================== USERNAMES COLLECTION ====================
    match /usernames/{username} {
      allow get: if true;
      allow create, update, delete: if request.auth != null && 
                                   request.auth.uid == request.resource.data.uid;
    }

    // ==================== USERS COLLECTION ====================
    match /users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.auth.uid == userId;
      // Allow users to update their own profile
      allow update: if request.auth != null && 
                    request.auth.uid == userId &&
                    onlyUpdatesAllowedFields(request.resource.data, resource.data);
      
      // User's posts subcollection
      match /posts/{postId} {
        allow read: if true;
        allow create: if request.auth != null && 
                      request.auth.uid == userId &&
                      validPostDocument(request.resource.data);
      }
    }

    // ==================== FOLLOWING COLLECTION ====================
    match /following/{userId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == userId;
      
      // Users subcollection to store who user is following
      match /users/{followedUserId} {
        allow read: if true;
        // Only allow user to update their own following list
        allow create, update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // ==================== FOLLOWERS COLLECTION ====================
    match /followers/{userId} {
      allow read: if true;
      
      // Users subcollection to store who follows the user
      match /users/{followerId} {
        allow read: if true;
        // Allow followers to add/remove themselves
        allow create, update: if request.auth != null && request.auth.uid == followerId;
        // Allow the user who is being followed to remove followers
        allow delete: if request.auth != null && (request.auth.uid == userId || request.auth.uid == followerId);
      }
    }

    // ==================== POSTS COLLECTION ====================
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if request.auth != null && 
                    validPostDocument(request.resource.data) &&
                    request.resource.data.author.id == request.auth.uid;
      allow update: if isPostAuthor() && 
                   withinEditWindow() && 
                   onlyUpdatesAllowedPostFields(request.resource.data, resource.data);
      allow update: if request.auth != null &&
                   onlyUpdatesLikes(request.resource.data, resource.data) &&
                   validLikeOperation(request.resource.data.likes, resource.data.likes);
      allow delete: if isPostAuthor();
    }

    // ==================== HELPER FUNCTIONS ====================
    function onlyUpdatesAllowedFields(newData, oldData) {
      return newData.diff(oldData).affectedKeys().hasOnly([
        "displayName",
        "bio",
        "website",
        "avatarUrl",
        "username",
        "photoURL",
        "email"
      ]);
    }

    function isPostAuthor() {
      return resource != null && 
             resource.data != null &&
             resource.data.author != null &&
             resource.data.author.id != null &&
             request != null &&
             request.auth != null && 
             request.auth.uid == resource.data.author.id;
    }

    function withinEditWindow() {
      return request.time < resource.data.createdAt + duration.value(24, 'h');
    }

    function validPostDocument(data) {
      return data.keys().hasOnly([
        "title",
        "content",
        "author",
        "likes",
        "createdAt"
      ]) && data.title is string &&
           data.content is string &&
           data.author is map &&
           data.author.id is string &&
           data.author.name is string &&
           data.likes is list &&
           data.createdAt is timestamp;
    }

    function onlyUpdatesAllowedPostFields(newData, oldData) {
      return newData.diff(oldData).affectedKeys().hasOnly(["title", "content"]);
    }

    function onlyUpdatesLikes(newData, oldData) {
      return newData.diff(oldData).affectedKeys().hasOnly(["likes"]);
    }

    function validLikeOperation(newLikes, oldLikes) {
      // Ensure only one like change at a time
      return newLikes.size() == oldLikes.size() + 1 ||
             newLikes.size() == oldLikes.size() - 1;
    }

    // ==================== DEFAULT DENY ====================
    match /{document=**} {
      allow read, write: if false;
    }
  }
}